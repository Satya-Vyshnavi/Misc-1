T.c --> O(n)
S.c --> O(n)

class Solution {
    int result = 0;
    public int depthSum(List<NestedInteger> nestedList) {  
        if(nestedList == null || nestedList.size() == 0){
            return 0;
        }
        Queue<NestedInteger> q = new LinkedList<>();
        for(NestedInteger list: nestedList){
            q.add(list);
        }
        int level = 1;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i =0; i<size; i++){
               NestedInteger curr = q.poll();
                if(curr.isInteger()){
                    int temp = curr.getInteger();
                    result = result + temp*level;
                }else{
                    for(NestedInteger list: curr.getList()){
                        q.add(list);
                    }
                }
            }
            level = level+1;            
        }
        return result;
    }    
}

***********************************************************************
T.c --> O(n)
S.c --> O(n)

class Solution {
    int result = 0;
    public int depthSum(List<NestedInteger> nestedList) {
         dfs(nestedList,1);
         return result;
    }
    public void dfs(List<NestedInteger> nestedList, int depth){
        for(NestedInteger list : nestedList){
            if(list.isInteger()){
               result = result + list.getInteger()*depth;
            }else{
               dfs(list.getList(),depth+1);
            }
        }
    }
}

***********************************************************************
T.c --> O(n)
S.c --> O(n)

class Solution {
    int result = 0;
    public int depthSum(List<NestedInteger> nestedList) {  
        if(nestedList == null || nestedList.size() == 0){
            return 0;
        }
        Queue<List<NestedInteger>> q = new LinkedList<>();
        q.add(nestedList);
        int level = 1;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i =0; i<size; i++){
               List<NestedInteger> curr = q.poll();
                for(NestedInteger list : curr){
                    if(list.isInteger()){
                       result = result + list.getInteger()*level;
                    }else{
                       q.add(list.getList());
                    }
                }
            }
            level = level+1;            
        }
        return result;
    }    
}